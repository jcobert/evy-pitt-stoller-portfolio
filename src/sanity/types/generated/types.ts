// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Project = {
  _id: string
  _type: 'project'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  datePublished?: string
  projectType?: 'production' | 'writing'
  mainVideo?: VideoGroup
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Video)
  >
  tags?: Array<string>
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'category'
  }>
  publishedAt?: string
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Video)
  >
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Profile = {
  _id: string
  _type: 'profile'
  _createdAt: string
  _updatedAt: string
  _rev: string
  id?: string
  firstName?: string
  lastName?: string
  titles?: Array<string>
  locations?: Array<string>
  photo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  contactInfo?: ContactInfo
  bio?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & Video)
  >
}

export type SocialLinks = {
  _type: 'socialLinks'
  linkedIn?: string
  twitter?: string
  facebook?: string
  instagram?: string
  tiktok?: string
  pinterest?: string
}

export type ContactInfo = {
  _type: 'contactInfo'
  email?: string
  phone?: string
  linkedIn?: string
  twitter?: string
  facebook?: string
  instagram?: string
  tiktok?: string
  pinterest?: string
}

export type VideoGroup = {
  _type: 'videoGroup'
  youtube?: YoutubeVideo
  vimeo?: Vimeo
  videoUpload?: Video
}

export type Video = {
  _type: 'video'
  file?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    media?: unknown
    _type: 'file'
  }
  alt?: string
}

export type VideoAltText = string

export type ImageAltText = string

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: ImageAltText
      _type: 'image'
      _key: string
    }
  | ({
      _key: string
    } & Video)
>

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Vimeo = {
  _type: 'vimeo'
  vimeoData?: {
    id?: string
  }
}

export type YoutubeVideo = {
  _type: 'youtubeVideo'
  id?: string
  title?: string
  description?: string
  publishedAt?: string
  thumbnails?: Array<string>
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Project
  | Category
  | Post
  | Author
  | Slug
  | Profile
  | SocialLinks
  | ContactInfo
  | VideoGroup
  | Video
  | VideoAltText
  | ImageAltText
  | BlockContent
  | SanityFileAsset
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Vimeo
  | YoutubeVideo
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/queries/fragments.ts
// Variable: image
// Query: { ..., asset-> }
export type ImageResult = never
// Variable: file
// Query: { ..., file{ ..., asset-> } }
export type FileResult = never
// Variable: videoGroup
// Query: { "youtube": coalesce(youtube, ''), "vimeo": coalesce(vimeo, ''), videoUpload{ ..., file{ ..., asset-> } } }
export type VideoGroupResult = {
  youtube: ''
  vimeo: ''
  videoUpload: never
}

// Source: ./src/sanity/lib/queries/profile-query.ts
// Variable: PROFILE_QUERY
// Query: *[_type=='profile' && _id=="profile"]{ ..., photo{ ..., asset-> } }[0]
export type PROFILE_QUERYResult = {
  _id: string
  _type: 'profile'
  _createdAt: string
  _updatedAt: string
  _rev: string
  id?: string
  firstName?: string
  lastName?: string
  titles?: Array<string>
  locations?: Array<string>
  photo: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
  contactInfo?: ContactInfo
  bio?: Array<
    | ({
        _key: string
      } & Video)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
  >
} | null

// Source: ./src/sanity/lib/queries/projects-query.ts
// Variable: PROJECTS_QUERY
// Query: *[_type=='project' && defined(slug)]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }
export type PROJECTS_QUERYResult = Array<{
  _id: string
  _type: 'project'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  datePublished?: string
  projectType?: 'production' | 'writing'
  mainVideo: {
    _type: 'videoGroup'
    youtube?: YoutubeVideo
    vimeo?: Vimeo
    videoUpload: {
      _type: 'video'
      file: {
        asset: {
          _id: string
          _type: 'sanity.fileAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          originalFilename?: string
          label?: string
          title?: string
          description?: string
          altText?: string
          sha1hash?: string
          extension?: string
          mimeType?: string
          size?: number
          assetId?: string
          uploadId?: string
          path?: string
          url?: string
          source?: SanityAssetSourceData
        } | null
        media?: unknown
        _type: 'file'
      } | null
      alt?: string
    } | null
  } | null
  mainImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  } | null
  description?: Array<
    | ({
        _key: string
      } & Video)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
  >
  tags: Array<string> | Array<never>
}>
// Variable: PROJECTS_BY_TYPE_QUERY
// Query: *[_type=='project' && projectType==$projectType && defined(slug)]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }
export type PROJECTS_BY_TYPE_QUERYResult = Array<{
  _id: string
  _type: 'project'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  datePublished?: string
  projectType?: 'production' | 'writing'
  mainVideo: {
    _type: 'videoGroup'
    youtube?: YoutubeVideo
    vimeo?: Vimeo
    videoUpload: {
      _type: 'video'
      file: {
        asset: {
          _id: string
          _type: 'sanity.fileAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          originalFilename?: string
          label?: string
          title?: string
          description?: string
          altText?: string
          sha1hash?: string
          extension?: string
          mimeType?: string
          size?: number
          assetId?: string
          uploadId?: string
          path?: string
          url?: string
          source?: SanityAssetSourceData
        } | null
        media?: unknown
        _type: 'file'
      } | null
      alt?: string
    } | null
  } | null
  mainImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  } | null
  description?: Array<
    | ({
        _key: string
      } & Video)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
  >
  tags: Array<string> | Array<never>
}>
// Variable: PROJECT_BY_SLUG_QUERY
// Query: *[_type=='project' && slug.current==$slug]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }[0]
export type PROJECT_BY_SLUG_QUERYResult = {
  _id: string
  _type: 'project'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  datePublished?: string
  projectType?: 'production' | 'writing'
  mainVideo: {
    _type: 'videoGroup'
    youtube?: YoutubeVideo
    vimeo?: Vimeo
    videoUpload: {
      _type: 'video'
      file: {
        asset: {
          _id: string
          _type: 'sanity.fileAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          originalFilename?: string
          label?: string
          title?: string
          description?: string
          altText?: string
          sha1hash?: string
          extension?: string
          mimeType?: string
          size?: number
          assetId?: string
          uploadId?: string
          path?: string
          url?: string
          source?: SanityAssetSourceData
        } | null
        media?: unknown
        _type: 'file'
      } | null
      alt?: string
    } | null
  } | null
  mainImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  } | null
  description?: Array<
    | ({
        _key: string
      } & Video)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
  >
  tags: Array<string> | Array<never>
} | null

declare module '@sanity/client' {
  interface SanityQueries {
    '{ ..., asset-> }': ImageResult
    '{ ..., file{ ..., asset-> } }': FileResult
    '{ "youtube": coalesce(youtube, \'\'), "vimeo": coalesce(vimeo, \'\'), videoUpload{ ..., file{ ..., asset-> } } }': VideoGroupResult
    '*[_type==\'profile\' && _id=="profile"]{ ..., photo{ ..., asset-> } }[0]': PROFILE_QUERYResult
    '*[_type==\'project\' && defined(slug)]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }': PROJECTS_QUERYResult
    '*[_type==\'project\' && projectType==$projectType && defined(slug)]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }': PROJECTS_BY_TYPE_QUERYResult
    '*[_type==\'project\' && slug.current==$slug]{ ..., "tags": coalesce(tags, []), mainImage{ ..., asset-> }, mainVideo{ ..., videoUpload{ ..., file{ ..., asset-> } } } }[0]': PROJECT_BY_SLUG_QUERYResult
  }
}
